package hw3;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;
import api.Direction;
import api.ShiftDescriptor;
import api.TileInfo;
import static api.Direction.*;

/**
 * This class contains the state and logic for an implementation of a
 * video game we call AlphabetSoup.  The basic underlying state is an n by n 
 * grid of tiles, represented by integer values.  A zero in a cell is considered 
 * to be "empty".  To play the game, a client calls the method <code>shift()</code>, 
 * selecting one of the four directions (LEFT, RIGHT, UP, DOWN). Each row or 
 * column is then shifted according to the rules encapsulated in the
 * associated <code>AlphabetUtil</code> object. The move is completed by
 * calling <code>setNewTile</code>, which makes a new tile appear in the grid
 * in preparation for the next move.
 * <p>
 * The game uses an instance of java.util.Random to generate new tile values
 * and to select the location for a new tile to appear.  The new values
 * are generated by the associated <code>AlphabetUtil</code>'s 
 * <code>randomNewTileValue</code> method, and the new positions are
 * generated in the <code>setNewTile</code> method of this class. 
 * <p>
 * The score in the game is the sum, over all cells, of the individual scores
 * returned by the <code>AlphabetUtil</code>'s <code>getScoreForOneTile()</code> 
 * method.
 */

/**
 * @author Joseph Hennings
 */
public class AlphabetSoup {
	
	/**
	 * Size of the grid
	 */
	private int GRID_SIZE;
	/**
	 * Private instance of AplhabetUtil
	 */
	private AlphabetUtil CONFIG;
	/**
	 * Private instance of Random object
	 */
	private Random RAND;
	/**
	 * THE ALMIGHTY GRID
	 */
	private int[][] GRID;
	
	/**
	 * The last direction
	 */
	private Direction DIR;

	/**
	 * Constructs a game with a grid of the given size, using a default
	 * random number generator. The initial grid is produced by the 
	 * <code>createNewGrid</code> method of the given 
	 * <code>AlphabetUtil</code> object.  
	 * @param givenSize
	 *   size of the grid for this game
	 * @param givenConfig
	 *   given instance of GameUtil   
	 */
	public AlphabetSoup(int givenSize, AlphabetUtil givenConfig) {
		GRID_SIZE = givenSize;
		CONFIG = givenConfig;
		Random rand = new Random();
		GRID = CONFIG.createNewGrid(givenSize, rand);
	}

	/**
	 * Constructs a game with a grid of the given size, using the given
	 * instance of <code>Random</code> for the random number generator.
	 * The initial grid is produced by the <code>createNewGrid</code> method 
	 * of the given <code>AlphabetUtil</code> object.  
	 * @param givenSize
	 *   size of the grid for this game
	 * @param givenConfig
	 *   given instance of AlphabetUtil
	 * @param givenRandom
	 *   given instance of Random   
	 */
	public AlphabetSoup(int givenSize, AlphabetUtil givenConfig, Random givenRandom) {
		GRID_SIZE = givenSize;
		CONFIG = givenConfig;
		RAND = givenRandom;
		GRID = CONFIG.createNewGrid(givenSize, givenRandom);
	}

	/**
	 * Returns the value in the cell at the given row and column.
	 * @param row
	 *   given row
	 * @param col
	 *   given column
	 * @return
	 *   value in the cell at the given row and column
	 */
	public int getCell(int row, int col) {
		return GRID[row][col];
	}

	/**
	 * Sets the value of the cell at the given row and column.
	 * <em>NOTE: This method should not be used by clients outside
	 * of a testing environment.</em>
	 * @param row
	 *   given row
	 * @param col
	 *   given col
	 * @param value
	 *   value to be set
	 */
	public void setCell(int row, int col, int value) {
		GRID[row][col] = value;
	}

	/**
	 * Returns the size of this game's grid.
	 * @return
	 *   size of the grid
	 */
	public int getSize() {
		return GRID_SIZE;
	}

	/**
	 * Returns the current score.
	 * @return
	 *   score for this game
	 */
	public int getScore()
	{
		// TODO
		return 0;
	}

	/**
	 * Returns the direction from the most recent call to <code>shift()</code>
	 * when a corresponding call to <code>setNewTile()</code> has not yet been 
	 * made. Otherwise, the method returns null.
	 * @return
	 *   direction of current pending shift
	 */
	public Direction getLastDirection() {
		return DIR; 
	}

	/**
	 * Copy a row or column from the grid into a new one-dimensional array.  
	 * There are four possible actions depending on the given direction:
	 * <ul>
	 *   <li>LEFT - the row indicated by the index <code>rowOrColumn</code> is
	 *   copied into the new array from left to right
	 *   <li>RIGHT - the row indicated by the index <code>rowOrColumn</code> is
	 *   copied into the new array in reverse (from right to left)
	 *   <li>UP - the column indicated by the index <code>rowOrColumn</code> is
	 *   copied into the new array from top to bottom
	 *   <li>DOWN - the row indicated by the index <code>rowOrColumn</code> is
	 *   copied into the new array in reverse (from bottom to top)
	 * </ul>
	 * @param rowOrColumn
	 *   index of the row or column
	 * @param dir
	 *   direction from which to begin copying
	 * @return
	 *   array containing the row or column
	 */
	public int[] getRowColumn(int rowOrColumn, Direction dir) {
		int arr[] = new int[GRID_SIZE];
		
		if (dir == DOWN) {
			int gridIndex = GRID_SIZE - 1;
			
			for (int i = 0; i < GRID_SIZE; i++) {
				arr[i] = GRID[gridIndex][rowOrColumn];
				gridIndex--;
			}
		}
		if (dir == UP) {
			int gridIndex = 0;
			
			for (int i = 0; i < GRID_SIZE; i++) {
				arr[i] = GRID[gridIndex][rowOrColumn];
				gridIndex++;
			}
		}
		if (dir == LEFT) {
			int gridIndex = GRID_SIZE - 1;
			
			for (int i = 0; i < GRID_SIZE; i++) {
				arr[i] = GRID[rowOrColumn][gridIndex];
				gridIndex--;
			}
		}
		if (dir == RIGHT) {
			int gridIndex = 0;
			
			for (int i = 0; i < GRID_SIZE; i++) {
				arr[i] = GRID[rowOrColumn][gridIndex];
				gridIndex++;
			}
		}
		
		return arr;
	}

	/**
	 * Updates the grid by copying the given one-dimensional array into
	 * a row or column of the grid.
	 * There are four possible actions depending on the given direction:
	 * <ul>
	 *   <li>LEFT - the given array is copied into the the row indicated by the 
	 *   index <code>rowOrColumn</code> from left to right
	 *   <li>RIGHT - the given array is copied into the the row indicated by the 
	 *   index <code>rowOrColumn</code> in reverse (from right to left)
	 *   <li>UP - the given array is copied into the column indicated by the 
	 *   index <code>rowOrColumn</code> from top to bottom
	 *   <li>DOWN - the given array is copied into the column indicated by the 
	 *   index <code>rowOrColumn</code> in reverse (from bottom to top)
	 * </ul>
	 * @param arr
	 *   the array from which to copy
	 * @param rowOrColumn
	 *   index of the row or column
	 * @param dir
	 *   direction from which to begin copying
	 */
	public void setRowColumn(int[] arr, int rowOrColumn, Direction dir) {
		
		if (dir == UP) {
			int gridIndex = 0;
			
			for (int i = 0; i < GRID_SIZE; i++) {
				setCell(gridIndex, rowOrColumn, arr[i]);
				GRID[gridIndex][rowOrColumn] = arr[i];
				gridIndex++;
			}
		}
		if (dir == DOWN) {
			int gridIndex = GRID_SIZE - 1;
			
			for (int i = 0; i < GRID_SIZE; i++) {
				GRID[gridIndex][rowOrColumn] = arr[i];
				gridIndex--;
			}
		}
		if (dir == RIGHT) {
			int gridIndex = 0;
			
			for (int i = 0; i < GRID_SIZE; i++) {
				GRID[rowOrColumn][gridIndex] = arr[i];
				gridIndex++;
			}
		}
		if (dir == LEFT) {
			int gridIndex = GRID_SIZE - 1;
			
			for (int i = 0; i < GRID_SIZE; i++) {
				GRID[rowOrColumn][gridIndex] = arr[i];
				gridIndex--;
			}
		}
		
	}

	/**
	 * Plays one step of the game by shifting the grid in the given direction.
	 * Returns a list of <code>ShiftDescriptor</code> objects describing all 
	 * moves performed.  All <code>ShiftDescriptor</code> 
	 * objects must include a valid value for <code>getRowOrColumn()</code> and 
	 * <code>getDirection()</code>.  If no cells are actually moved, the method returns
	 * an empty list.
	 * <p>
	 * The shift of an individual row or column is performed by the 
	 * method <code>shift()</code> of the associated <code>AlphabetUtil</code>
	 * instance.  
	 * <p>
	 * This method does not update the score (that occurs in <code>setNewTile()</code>).
	 * 
	 * @param dir
	 *   direction in which to shift the grid
	 * @return
	 *   list of moved or merged tiles
	 */
	public ArrayList<ShiftDescriptor> shift(Direction dir) {
		
		ArrayList<ShiftDescriptor> shiftDescriptors = new ArrayList<>();
        DIR = dir;
       
       for (int i = 0; i < GRID_SIZE; i++) {
    	   int[] arr = getRowColumn(i, dir);
    	   shiftDescriptors.addAll(CONFIG.doShift(arr));
    	   setRowColumn(arr, i, dir);
       }

        return shiftDescriptors;
	}
	



	/**
	 * Generates a new tile and places its value in the grid, provided that
	 * there was a previous call to  <code>shift()</code> without a 
	 * corresponding call to <code>setNewTile</code> (in other words, 
	 * when <code>getLastDirection()</code> returns a non-null value). 
	 * In all other cases, this method does nothing and returns null.
	 * <p>
	 * The tile's value is determined by the associated
	 * <code>AlphabetUtil</code>'s <code>randomNewTileValue()</code> method.
	 * The tile's position is randomly selected from the empty cells
	 * on the side of the grid opposite the previous move's direction.
	 * <p>
	 * This method updates the total score, and the score includes the newly 
	 * generated tile.
	 * 
	 * @return
	 *   TileInfo object containing the new tile's position and value, or null
	 *   if no new tile is added to the grid
	 */
	public TileInfo setNewTile()
	{
		// TODO
		return null;
	}
    
}
  










